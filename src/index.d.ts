/** Declaration file generated by dts-gen */

export class UIEventObserver {
    constructor();

    hasSubscriber(targetElement: any, domEventName: any): any;

    subscribe(target: any, eventName: any, handler: any): any;

    subscribeOnce(target: any, eventName: any, handler: any): any;

    unsubscribe(target: any, eventName: any, handler: any): void;

    unsubscribeAll(): void;

}

export function hasSubscriber(targetElement: any, domEventName: any): any;

export function subscribe(target: any, eventName: any, handler: any): any;

export function subscribeOnce(target: any, eventName: any, handler: any): any;

export function unsubscribe(target: any, eventName: any, handler: any): void;

export function unsubscribeAll(): void;

export namespace UIEventObserver {
    namespace prototype {
        function hasSubscriber(targetElement: any, domEventName: any): any;

        function subscribe(target: any, eventName: any, handler: any): any;

        function subscribeOnce(target: any, eventName: any, handler: any): any;

        function unsubscribe(target: any, eventName: any, handler: any): void;

        function unsubscribeAll(): void;

        namespace hasSubscriber {
            const prototype: {
            };

        }

        namespace subscribe {
            const prototype: {
            };

        }

        namespace subscribeOnce {
            const prototype: {
            };

        }

        namespace unsubscribe {
            const prototype: {
            };

        }

        namespace unsubscribeAll {
            const prototype: {
            };

        }

    }

}

export namespace hasSubscriber {
    const prototype: {
    };

}

export namespace subscribe {
    const prototype: {
    };

}

export namespace subscribeOnce {
    const prototype: {
    };

}

export namespace unsubscribe {
    const prototype: {
    };

}

export namespace unsubscribeAll {
    const prototype: {
    };

}
